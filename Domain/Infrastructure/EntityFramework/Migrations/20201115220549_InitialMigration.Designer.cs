// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoE.ECE.Domain.Infrastructure.EntityFramework;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoE.ECE.Domain.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ReferenceDataContext))]
    [Migration("20201115220549_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceLicencingDetailDateRangedParameter", b =>
                {
                    b.Property<int>("LicencingDetailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("licencing_detail_history_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationStatusDescription")
                        .HasColumnName("application_status_description")
                        .HasColumnType("text");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnName("application_status_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EffectiveFromDate")
                        .HasColumnName("effective_from_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveToDate")
                        .HasColumnName("effective_to_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenceClassDescription")
                        .HasColumnName("licence_class_description")
                        .HasColumnType("text");

                    b.Property<int?>("LicenceClassId")
                        .HasColumnName("licence_class_id")
                        .HasColumnType("integer");

                    b.Property<string>("LicenceStatusDescription")
                        .HasColumnName("licence_status_description")
                        .HasColumnType("text");

                    b.Property<int>("LicenceStatusId")
                        .HasColumnName("licence_status_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefOrganisationId")
                        .HasColumnName("ref_organisation_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceProvisionTypeDescription")
                        .HasColumnName("service_provision_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("ServiceProvisionTypeId")
                        .HasColumnName("service_provision_type_id")
                        .HasColumnType("integer");

                    b.HasKey("LicencingDetailHistoryId")
                        .HasName("pk_ece_licencing_detail_date_ranged_parameters");

                    b.HasIndex("RefOrganisationId")
                        .HasName("ix_ece_licencing_detail_date_ranged_parameters_ref_organisatio");

                    b.ToTable("ece_licencing_detail_date_ranged_parameter","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceOperatingSession", b =>
                {
                    b.Property<int>("OperatingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("operating_session_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FundedHours")
                        .HasColumnName("funded_hours")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxChildren")
                        .HasColumnName("max_children")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxChildrenUnder2")
                        .HasColumnName("max_children_under2")
                        .HasColumnType("integer");

                    b.Property<int>("OperatingHours")
                        .HasColumnName("operating_hours")
                        .HasColumnType("integer");

                    b.Property<int>("RefOrganisationId")
                        .HasColumnName("ref_organisation_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionDayDescription")
                        .HasColumnName("session_day_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionDayId")
                        .HasColumnName("session_day_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionProvisionTypeDescription")
                        .HasColumnName("session_provision_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionProvisionTypeId")
                        .HasColumnName("session_provision_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionTypeDescription")
                        .HasColumnName("session_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionTypeId")
                        .HasColumnName("session_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OperatingSessionId")
                        .HasName("pk_ece_operating_sessions");

                    b.HasIndex("RefOrganisationId")
                        .HasName("ix_ece_operating_session_ref_organisation_id");

                    b.ToTable("ece_operating_session","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceOperatingSessionDateRangedParameter", b =>
                {
                    b.Property<int>("LicencingDetailHistoryId")
                        .HasColumnName("licencing_detail_history_id")
                        .HasColumnType("integer");

                    b.Property<int>("OperatingSessionId")
                        .HasColumnName("operating_session_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EffectiveFromDate")
                        .HasColumnName("effective_from_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveToDate")
                        .HasColumnName("effective_to_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaxChildren")
                        .HasColumnName("max_children")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxChildrenUnder2")
                        .HasColumnName("max_children_under2")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefOrganisationId")
                        .HasColumnName("ref_organisation_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionDayDescription")
                        .HasColumnName("session_day_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionDayId")
                        .HasColumnName("session_day_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionProvisionTypeDescription")
                        .HasColumnName("session_provision_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionProvisionTypeId")
                        .HasColumnName("session_provision_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("SessionTypeDescription")
                        .HasColumnName("session_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("SessionTypeId")
                        .HasColumnName("session_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LicencingDetailHistoryId", "OperatingSessionId")
                        .HasName("pk_ece_operating_session_date_ranged_parameters");

                    b.HasIndex("RefOrganisationId")
                        .HasName("ix_ece_operating_session_date_ranged_parameters_ref_organisati");

                    b.ToTable("ece_operating_session_date_ranged_parameter","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceService", b =>
                {
                    b.Property<int>("RefOrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ref_organisation_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationStatusDescription")
                        .HasColumnName("application_status_description")
                        .HasColumnType("text");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnName("application_status_id")
                        .HasColumnType("integer");

                    b.Property<int?>("AreaUnitId")
                        .HasColumnName("area_unit_id")
                        .HasColumnType("integer");

                    b.Property<string>("AreaUnitName")
                        .HasColumnName("area_unit_name")
                        .HasColumnType("text");

                    b.Property<bool?>("BlockedFromOfferingFreeEce")
                        .HasColumnName("blocked_from_offering_free_ece")
                        .HasColumnType("boolean");

                    b.Property<string>("BulkFundingRateDescription")
                        .HasColumnName("bulk_funding_rate_description")
                        .HasColumnType("text");

                    b.Property<int?>("BulkFundingRateId")
                        .HasColumnName("bulk_funding_rate_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ClosedFunding")
                        .HasColumnName("closed_funding")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EarliestOpenDate")
                        .HasColumnName("earliest_open_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EcQualityLevelDescription")
                        .HasColumnName("ec_quality_level_description")
                        .HasColumnType("text");

                    b.Property<int?>("EcQualityLevelId")
                        .HasColumnName("ec_quality_level_id")
                        .HasColumnType("integer");

                    b.Property<string>("EceCulturalCharacterDescriptions")
                        .HasColumnName("ece_cultural_character_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("EceCulturalCharacterIds")
                        .HasColumnName("ece_cultural_character_ids")
                        .HasColumnType("text");

                    b.Property<int?>("EceServiceProviderId")
                        .HasColumnName("ece_service_provider_id")
                        .HasColumnType("integer");

                    b.Property<string>("EceServiceProviderName")
                        .HasColumnName("ece_service_provider_name")
                        .HasColumnType("text");

                    b.Property<string>("EceServiceProviderNumber")
                        .HasColumnName("ece_service_provider_number")
                        .HasColumnType("text");

                    b.Property<string>("EceServiceProviderOwnershipTypeDescription")
                        .HasColumnName("ece_service_provider_ownership_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("EceServiceProviderOwnershipTypeId")
                        .HasColumnName("ece_service_provider_ownership_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EceServiceStatusDate")
                        .HasColumnName("ece_service_status_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EceServiceStatusReasonDescription")
                        .HasColumnName("ece_service_status_reason_description")
                        .HasColumnType("text");

                    b.Property<int?>("EceServiceStatusReasonId")
                        .HasColumnName("ece_service_status_reason_id")
                        .HasColumnType("integer");

                    b.Property<string>("EducationPhilosophyDescriptions")
                        .HasColumnName("education_philosophy_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("EducationPhilosophyIds")
                        .HasColumnName("education_philosophy_ids")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<int?>("EmailLocatorId")
                        .HasColumnName("email_locator_id")
                        .HasColumnType("integer");

                    b.Property<string>("EquityIndexDescription")
                        .HasColumnName("equity_index_description")
                        .HasColumnType("text");

                    b.Property<int?>("EquityIndexId")
                        .HasColumnName("equity_index_id")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalProviderId")
                        .HasColumnName("external_provider_id")
                        .HasColumnType("text");

                    b.Property<int?>("FaxLocatorId")
                        .HasColumnName("fax_locator_id")
                        .HasColumnType("integer");

                    b.Property<string>("FaxNumber")
                        .HasColumnName("fax_number")
                        .HasColumnType("text");

                    b.Property<int?>("FundingContactId")
                        .HasColumnName("funding_contact_id")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("FundingDate")
                        .HasColumnName("funding_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GeneralElectoralDistrictId")
                        .HasColumnName("general_electoral_district_id")
                        .HasColumnType("integer");

                    b.Property<string>("GeneralElectoralDistrictName")
                        .HasColumnName("general_electoral_district_name")
                        .HasColumnType("text");

                    b.Property<string>("InstallmentPaymentReasonDescriptions")
                        .HasColumnName("installment_payment_reason_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("InstallmentPaymentReasonIds")
                        .HasColumnName("installment_payment_reason_ids")
                        .HasColumnType("text");

                    b.Property<string>("InstallmentPaymentWithheldReasonDescriptions")
                        .HasColumnName("installment_payment_withheld_reason_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("InstallmentPaymentWithheldReasonIds")
                        .HasColumnName("installment_payment_withheld_reason_ids")
                        .HasColumnType("text");

                    b.Property<bool?>("InstallmentPayments")
                        .HasColumnName("installment_payments")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFunded")
                        .HasColumnName("is_funded")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNotionalRoleUsed")
                        .HasColumnName("is_notional_role_used")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPoIndicator")
                        .HasColumnName("is_po_indicator")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("IsolationIndex")
                        .HasColumnName("isolation_index")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("LicenceClassDescription")
                        .HasColumnName("licence_class_description")
                        .HasColumnType("text");

                    b.Property<int?>("LicenceClassId")
                        .HasColumnName("licence_class_id")
                        .HasColumnType("integer");

                    b.Property<string>("LicenceStatusDescription")
                        .HasColumnName("licence_status_description")
                        .HasColumnType("text");

                    b.Property<int>("LicenceStatusId")
                        .HasColumnName("licence_status_id")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalOfficeId")
                        .HasColumnName("local_office_id")
                        .HasColumnType("integer");

                    b.Property<string>("LocalOfficeName")
                        .HasColumnName("local_office_name")
                        .HasColumnType("text");

                    b.Property<string>("LocalOfficeNumber")
                        .HasColumnName("local_office_number")
                        .HasColumnType("text");

                    b.Property<string>("LocationAddressLine1")
                        .HasColumnName("location_address_line1")
                        .HasColumnType("text");

                    b.Property<string>("LocationAddressLine2")
                        .HasColumnName("location_address_line2")
                        .HasColumnType("text");

                    b.Property<string>("LocationAddressLine3")
                        .HasColumnName("location_address_line3")
                        .HasColumnType("text");

                    b.Property<string>("LocationAddressLine4")
                        .HasColumnName("location_address_line4")
                        .HasColumnType("text");

                    b.Property<int?>("LocationShortAddressId")
                        .HasColumnName("location_short_address_id")
                        .HasColumnType("integer");

                    b.Property<int?>("MaoriElectoralDistrictId")
                        .HasColumnName("maori_electoral_district_id")
                        .HasColumnType("integer");

                    b.Property<string>("MaoriElectoralDistrictName")
                        .HasColumnName("maori_electoral_district_name")
                        .HasColumnType("text");

                    b.Property<int?>("MeshBlockId")
                        .HasColumnName("mesh_block_id")
                        .HasColumnType("integer");

                    b.Property<int?>("MeshBlockNumber")
                        .HasColumnName("mesh_block_number")
                        .HasColumnType("integer");

                    b.Property<string>("MoeContact")
                        .HasColumnName("moe_contact")
                        .HasColumnType("text");

                    b.Property<string>("MoeContactName")
                        .HasColumnName("moe_contact_name")
                        .HasColumnType("text");

                    b.Property<string>("NotFundedReasonDescriptions")
                        .HasColumnName("not_funded_reason_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("NotFundedReasonIds")
                        .HasColumnName("not_funded_reason_ids")
                        .HasColumnType("text");

                    b.Property<long?>("Nzbn")
                        .HasColumnName("nzbn")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("OpenDate")
                        .HasColumnName("open_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnName("organisation_name")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationNumber")
                        .IsRequired()
                        .HasColumnName("organisation_number")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationSectorRoleDescription")
                        .HasColumnName("organisation_sector_role_description")
                        .HasColumnType("text");

                    b.Property<int?>("OrganisationSectorRoleId")
                        .HasColumnName("organisation_sector_role_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrganisationStatusDescription")
                        .HasColumnName("organisation_status_description")
                        .HasColumnType("text");

                    b.Property<int>("OrganisationStatusId")
                        .HasColumnName("organisation_status_id")
                        .HasColumnType("integer");

                    b.Property<string>("OrganisationTypeDescription")
                        .HasColumnName("organisation_type_description")
                        .HasColumnType("text");

                    b.Property<int>("OrganisationTypeId")
                        .HasColumnName("organisation_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherEmail")
                        .HasColumnName("other_email")
                        .HasColumnType("text");

                    b.Property<int?>("OtherEmailLocatorId")
                        .HasColumnName("other_email_locator_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherLanguageDescription")
                        .HasColumnName("other_language_description")
                        .HasColumnType("text");

                    b.Property<int?>("OtherLanguageId")
                        .HasColumnName("other_language_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("ParentLedEligibleToOfferFree")
                        .HasColumnName("parent_led_eligible_to_offer_free")
                        .HasColumnType("boolean");

                    b.Property<int?>("PhoneLocatorId")
                        .HasColumnName("phone_locator_id")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine1")
                        .HasColumnName("postal_address_line1")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnName("postal_address_line2")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine3")
                        .HasColumnName("postal_address_line3")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine4")
                        .HasColumnName("postal_address_line4")
                        .HasColumnType("text");

                    b.Property<int?>("PostalShortAddressId")
                        .HasColumnName("postal_short_address_id")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryLanguageDescription")
                        .HasColumnName("primary_language_description")
                        .HasColumnType("text");

                    b.Property<int?>("PrimaryLanguageId")
                        .HasColumnName("primary_language_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("ProtectedRate")
                        .HasColumnName("protected_rate")
                        .HasColumnType("boolean");

                    b.Property<string>("RegionDescription")
                        .HasColumnName("region_description")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionalCouncilId")
                        .HasColumnName("regional_council_id")
                        .HasColumnType("integer");

                    b.Property<string>("RegionalCouncilName")
                        .HasColumnName("regional_council_name")
                        .HasColumnType("text");

                    b.Property<string>("ReligiousAffiliationDescriptions")
                        .HasColumnName("religious_affiliation_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("ReligiousAffiliationIds")
                        .HasColumnName("religious_affiliation_ids")
                        .HasColumnType("text");

                    b.Property<string>("SeDistrictDescription")
                        .HasColumnName("se_district_description")
                        .HasColumnType("text");

                    b.Property<int?>("SeDistrictId")
                        .HasColumnName("se_district_id")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceProvisionTypeDescription")
                        .HasColumnName("service_provision_type_description")
                        .HasColumnType("text");

                    b.Property<int?>("ServiceProvisionTypeId")
                        .HasColumnName("service_provision_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialistServiceDescriptions")
                        .HasColumnName("specialist_service_descriptions")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistServiceIds")
                        .HasColumnName("specialist_service_ids")
                        .HasColumnType("text");

                    b.Property<bool?>("TeacherLedEligibleToOfferFree")
                        .HasColumnName("teacher_led_eligible_to_offer_free")
                        .HasColumnType("boolean");

                    b.Property<int?>("TerritorialAuthorityId")
                        .HasColumnName("territorial_authority_id")
                        .HasColumnType("integer");

                    b.Property<string>("TerritorialAuthorityName")
                        .HasColumnName("territorial_authority_name")
                        .HasColumnType("text");

                    b.Property<int?>("UrbanAreaId")
                        .HasColumnName("urban_area_id")
                        .HasColumnType("integer");

                    b.Property<string>("UrbanAreaName")
                        .HasColumnName("urban_area_name")
                        .HasColumnType("text");

                    b.Property<int?>("WardId")
                        .HasColumnName("ward_id")
                        .HasColumnType("integer");

                    b.Property<string>("WardName")
                        .HasColumnName("ward_name")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.Property<int?>("WebsiteLocatorId")
                        .HasColumnName("website_locator_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("WithholdPayments")
                        .HasColumnName("withhold_payments")
                        .HasColumnType("boolean");

                    b.HasKey("RefOrganisationId")
                        .HasName("pk_ece_services");

                    b.ToTable("ece_service","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceServiceDateRangedParameter", b =>
                {
                    b.Property<int>("HistoryId")
                        .HasColumnName("history_id")
                        .HasColumnType("integer");

                    b.Property<string>("AttributeSource")
                        .HasColumnName("attribute_source")
                        .HasColumnType("text");

                    b.Property<string>("Attribute")
                        .HasColumnName("attribute")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EffectiveFromDate")
                        .HasColumnName("effective_from_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveToDate")
                        .HasColumnName("effective_to_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArray")
                        .HasColumnName("is_array")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnName("modified_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefOrganisationId")
                        .HasColumnName("ref_organisation_id")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.Property<string>("ValueDescription")
                        .HasColumnName("value_description")
                        .HasColumnType("text");

                    b.HasKey("HistoryId", "AttributeSource")
                        .HasName("pk_ece_service_date_ranged_parameters");

                    b.HasIndex("RefOrganisationId")
                        .HasName("ix_ece_service_date_ranged_parameters_ref_organisation_id");

                    b.ToTable("ece_service_date_ranged_parameter","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("EdumisCode")
                        .HasColumnName("edumis_code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EffectiveFromDate")
                        .HasColumnName("effective_from_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EffectiveToDate")
                        .HasColumnName("effective_to_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LookupTypeId")
                        .HasColumnName("lookup_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentLookupId")
                        .HasColumnName("parent_lookup_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_lookups");

                    b.HasIndex("LookupTypeId")
                        .HasName("ix_lookups_lookup_type_id");

                    b.ToTable("lookup","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.LookupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_lookup_types");

                    b.ToTable("lookup_type","referencedata");
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceOperatingSession", b =>
                {
                    b.HasOne("MoE.ECE.Domain.Model.ReferenceData.EceService", "EceService")
                        .WithMany("OperatingSessions")
                        .HasForeignKey("RefOrganisationId")
                        .HasConstraintName("fk_ece_operating_session_ece_services_ece_service_ref_organisa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.EceOperatingSessionDateRangedParameter", b =>
                {
                    b.HasOne("MoE.ECE.Domain.Model.ReferenceData.EceLicencingDetailDateRangedParameter", "EceLicencingDetailDateRangedParameter")
                        .WithMany("EceOperatingSessionDateRangedParameters")
                        .HasForeignKey("LicencingDetailHistoryId")
                        .HasConstraintName("fk_ece_operating_session_date_ranged_parameters_ece_licencing_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoE.ECE.Domain.Model.ReferenceData.Lookup", b =>
                {
                    b.HasOne("MoE.ECE.Domain.Model.ReferenceData.LookupType", null)
                        .WithMany("Lookups")
                        .HasForeignKey("LookupTypeId")
                        .HasConstraintName("fk_lookups_lookup_types_lookup_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
