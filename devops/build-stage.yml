parameters:
  azureDevOpsServiceConnection: ''
  azureKeyvaultInstance: ''
  containerRegistry: 'mapaerscontainerregistry'
  dockerImageRepository: 'eceapi'

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: Build
        steps:                   
          - checkout: self
            persistCredentials: true
            clean: true
      
          # Fix for 401 timeout issue against nuget feed (Support case #120110523002341)
          - bash: |
              echo "##vso[task.setvariable variable=NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS]120"
              echo "##vso[task.setvariable variable=NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS]120"
            displayName: "Set NuGet Auth Timeout Values" 
          
          # Auth to Azure Artifacts where the NuGet feed lives
          - task: NuGetAuthenticate@0
            displayName: 'NuGet Authenticate'
            
          - task: AzureKeyVault@1
            condition: succeeded()
            displayName: 'Link keyvault with Azure DevOps'
            inputs:
              azureSubscription: '${{ parameters.azureDevOpsServiceConnection }}'
              keyVaultName: '${{ parameters.azureKeyvaultInstance }}'
              secretsFilter: 'OPASettings--UserSecret'
            continueOnError: false

          - task: geeklearningio.gl-vsts-tasks-file-patch.json-patch-task.JsonPatch@3
            condition: succeeded()
            displayName: 'Set OPA Settings For Integration Tests'
            inputs:
              JsonWorkingDir: '$(Build.SourcesDirectory)/Test/Integration'
              JsonTargetFilters: appsettings.integration-test.json
              JsonPatchContent: |
                = /OpaSettings/UserName => "ersuser"
                = /OpaSettings/UserSecret => "$(OPASettings--UserSecret)"               
              OutputPatchFile: true
              ProduceJson5: true
              FailIfNoPatchApplied: true
            continueOnError: false
            
          - task: DotNetCoreCLI@2
            displayName: Run All Tests
            inputs:
              command: test
              arguments: '--logger:"console;verbosity=detailed"'
              projects: '**/*.Tests.csproj'
              workingDirectory: $(Build.SourcesDirectory)/Test

          - task: PublishTestResults@2
            condition: always()
            displayName: Publish test results
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
              publishRunAttachments: true
              failTaskOnFailedTests: true

          # Use Docker task to add ADO labels used during release
          - task: Docker@2
            displayName: 'Build Image'
            inputs:
              command: build
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              containerRegistry:  ${{ parameters.containerRegistry }}
              repository: '${{ parameters.dockerImageRepository }}'
              tags: |
                $(Build.BuildNumber)
                latest
              arguments:  --build-arg buildno=$(Build.BuildNumber) --build-arg ERSNUGETFEED_ACCESSTOKEN=$(System.AccessToken)

          - task: Docker@2
            displayName: 'Init Docker'
            inputs:
              command: login
              containerRegistry: "${{ parameters.containerRegistry }}"

          # Push image without signing
          - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            - task: Docker@2
              displayName: 'Push an image'
              inputs:
                command: push
                repository: '${{ parameters.dockerImageRepository }}'
                containerRegistry:  ${{ parameters.containerRegistry }}
                tags: |
                  $(Build.BuildNumber)
  
          # Sign and Push
          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            - task: AzureKeyVault@1
              displayName: 'Retrieve Signing Key'
              inputs:
                azureSubscription: '$(prodUatAzureRMServiceConnection)'
                keyVaultName: 'mapaersprodsecrets'
                secretsFilter: 'acr-repo-ci-signing-key-passphrase, acr-repo-ci-signing-key, acr-repo-ci-signing-key-filename'
              continueOnError: false

            # Login with Signer credentials
            - task: AzureCLI@2
              displayName: 'ACR Image Signer Auth'
              inputs:
                azureSubscription: '$(prodUatAzureRMServiceConnection)'
                scriptType: pscore
                scriptLocation: inlineScript
                addSpnToEnvironment: true
                inlineScript: |
                  az acr login -n ${{ parameters.containerRegistry }}

            - task: PowerShell@2
              displayName: 'Docker Sign and Push'
              inputs:
                targetType: inline
                script: |
                  mkdir -p $(DOCKER_CONFIG)/trust/private
                  [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:KEY_BASE64)) | Out-File -FilePath $(DOCKER_CONFIG)/trust/private/$env:KEY_FILENAME.key

                  # Push image with build number and latest tags off master 
                  $buildImageName = "{0}.azurecr.io/{1}:{2}" -f $env:ACR_NAME, $env:DOCKER_REPO, $env:DOCKER_TAG
                  $latestImageName = "{0}.azurecr.io/{1}:latest" -f $env:ACR_NAME, $env:DOCKER_REPO

                  docker push $buildImageName
                  docker tag $buildImageName $latestImageName
                  docker push $latestImageName
              env:
                DOCKER_CONTENT_TRUST: 1 # Force DCT for all docker commands
                DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(acr-repo-ci-signing-key-passphrase)
                KEY_BASE64: $(acr-repo-ci-signing-key)
                KEY_FILENAME: $(acr-repo-ci-signing-key-filename)
                ACR_NAME: ${{ parameters.containerRegistry }}
                DOCKER_REPO: ${{ parameters.dockerImageRepository }}
                DOCKER_TAG: $(Build.BuildNumber)

          - task: PowerShell@2
            condition: succeeded()
            displayName: 'Tag the build'
            inputs:
              targetType: 'inline'
              script: |
                git tag '$(Build.BuildNumber)'
                Write-Host "Successfully created tag $(Build.BuildNumber)"
                git push --tags
                Write-Host "Successfully pushed tag $(Build.BuildNumber) to origin"

          - task: PowerShell@2
            condition: always()
            displayName: 'ACR Logout'
            inputs:
              targetType: 'inline'
              script: |
                docker logout ${{ parameters.containerRegistry }}.azurecr.io

