parameters:
  environmentPrefix: ''
  environmentSuffix: ''
  environmentName: ''
  environmentNumber: ''
  applicationName: ''
  releaseStageDescriptor: ''
  azureDevOpsServiceConnection: ''
  runTerraformDestroy: false
  runTerraformApply: true
  terraformSourceDir: '$(Build.SourcesDirectory)/devops/terraform'
  containerImage: ''
  decomDate: ''
       
steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: "${{ parameters.azureDevOpsServiceConnection }}"
    scriptType: pscore
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      $environment = "${{ parameters.environmentName }}-${{ parameters.environmentNumber }}".ToUpper()
      Write-Output "##vso[task.setvariable variable=environment]$environment"
      Write-Output "Set variable [environment] to [$environment]"
      $stateResourceGroup = "${{ parameters.environmentPrefix }}-ERS-${{ parameters.environmentSuffix }}-TFSTATE".ToUpper()
      $stateStorageAccount = ($stateResourceGroup -replace "\W","").ToLower()
      $stateContainer = "tfstate-$environment".ToLower()
      $subscriptionId = az account show --query id -o tsv

      $actiongroup_resource_group = "${{ parameters.environmentPrefix }}-ERS-${{ parameters.environmentSuffix }}-MASTER".ToUpper()
      $actiongroup_name = "${{ upper(parameters.environmentSuffix) }}-ActionGroup"

      Write-Output "##vso[task.setvariable variable=actiongroup_resource_group]$actiongroup_resource_group"
      Write-Output "Set variable [actiongroup_resource_group] to [$actiongroup_resource_group]"

      Write-Output "##vso[task.setvariable variable=actiongroup_name]$actiongroup_name"
      Write-Output "Set variable [actiongroup_name] to [$actiongroup_name]"

      Write-Output "##vso[task.setvariable variable=stateResourceGroup]$stateResourceGroup"
      Write-Output "Set variable [stateResourceGroup] to [$stateResourceGroup]"

      Write-Output "##vso[task.setvariable variable=stateStorageAccount]$stateStorageAccount"
      Write-Output "Set variable [stateStorageAccount] to [$stateStorageAccount]"

      Write-Output "##vso[task.setvariable variable=stateContainer]$stateContainer"
      Write-Output "Set variable [stateContainer] to [$stateContainer]"

      Write-Output "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$env:servicePrincipalId"
      Write-Output "##[command]Set variable [ARM_CLIENT_ID]"

      Write-Output "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$env:servicePrincipalKey"
      Write-Output "##[command]Set variable [ARM_CLIENT_SECRET]"

      Write-Output "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
      Write-Output "##[command]Set variable [ARM_SUBSCRIPTION_ID]"

      Write-Output "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
      Write-Output "##[command]Set variable [ARM_TENANT_ID]"
  continueOnError: false
  displayName: 'Terraform App: Initialise Variables'

- ${{ if eq(parameters.runTerraformDestroy, true) }}:
  # Teardown any active sessions to the database before terraform destroy
  # Create a connection string, revoke access, and terminate any sessions to the database
  - task: AzureCLI@2
    displayName: 'Terraform App: Prep PSQL DB for deletion'
    inputs:
      azureSubscription: "${{ parameters.azureDevOpsServiceConnection }}"
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: false
      powerShellErrorActionPreference: 'silentlyContinue'
      inlineScript: |
        $keyvaultName = "${{ parameters.environmentPrefix }}ers${{ parameters.environmentSuffix }}secrets"
        $secretName = "psqlserveradmin-password" 
        $env:PGPASSWORD = az keyvault secret show --vault-name "$keyvaultName" --name "$secretName" -o tsv --query value
        if ([string]::IsNullOrEmpty($env:PGPASSWORD)) {
          echo "##vso[task.logissue type=warning] Failed to get database credentials. This is not normal."
          exit 0
        }
        # Use psql client (or CLI?) to revoke and terminate existing DB connections otherwise destroy fails with active sessions
        echo "Installing postgresql-client.."
        sudo apt install -y postgresql-client
        psql -V

        $dbServerName = "${{ parameters.environmentPrefix }}ers${{ parameters.environmentSuffix }}psqlserver".ToLower()
        $dbName = "${{ parameters.environmentPrefix }}ers${{ parameters.environmentName }}${{ parameters.environmentnumber }}psql${{ parameters.applicationName }}".ToLower()
        $dbEndpoint = "$dbServerName.postgres.database.azure.com"
        $dbUsername = "psqlserveradmin"

        $dbConnectionString = "host=$dbEndpoint port=5432 user='$dbUsername@$dbServerName' dbname=postgres sslmode=require"
        $revokeAccessSqlCommand = @"
        alter database $dbName allow_connections = off;
        REVOKE CONNECT ON DATABASE $dbName FROM PUBLIC;
        SELECT pg_terminate_backend(pid) 
        FROM pg_stat_activity 
        WHERE pid <> pg_backend_pid() AND datname = '$dbName';
        "@

        Write-Output "Command: $revokeAccessSqlCommand"
        Write-Output "ConnString: $dbConnectionString"

        echo "Revoking access and terminating sessions to db $dbName .."
        psql -d "$dbConnectionString" -c "$revokeAccessSqlCommand"
        if ($LASTEXITCODE -ne 0) {
          Write-Output "Failed to revoke DB access. Try to continue gracefully.."
          exit 0
        }
    continueOnError: true

  - task: PowerShell@2
    condition: succeeded()
    displayName: 'Terraform App: Destroy ${{ parameters.applicationName }}'
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
    inputs:
      targetType: inline
      workingDirectory: '${{ parameters.terraformSourceDir }}'
      script: |
        terraform init -reconfigure -backend-config=resource_group_name=$(stateResourceGroup) -backend-config=storage_account_name=$(stateStorageAccount) -backend-config=container_name=$(stateContainer) -backend-config=key=${{ parameters.applicationName }}

        $tfVars = "-var=environment=$(environment) -var=environment_prefix=${{ parameters.environmentPrefix }} -var=environment_suffix=${{ parameters.environmentSuffix }} -var=actiongroup_name=$(actiongroup_name) -var=actiongroup_resource_group=$(actiongroup_resource_group) -var=container_image_source=${{ parameters.containerImage }} -var=decom_date=${{ parameters.decomDate }}".Split(' ')
        Write-Output "##[debug]`$tfVars = [$tfVars]"
        terraform destroy -auto-approve $tfVars
        if ($LASTEXITCODE -ne 0) {
          Write-Output "Error destroying resources."
          exit 1
        }
    continueOnError: false
    
- ${{ if eq(parameters.runTerraformApply, true) }}:
  - task: PowerShell@2
    condition: succeeded()
    displayName: 'Terraform App: Deploy ${{ parameters.applicationName }}'
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
    inputs:
      targetType: inline
      workingDirectory: '${{ parameters.terraformSourceDir }}'
      script: |
        terraform init -reconfigure -backend-config=resource_group_name=$(stateResourceGroup) -backend-config=storage_account_name=$(stateStorageAccount) -backend-config=container_name=$(stateContainer) -backend-config=key=${{ parameters.applicationName }}

        # The below will output the plan (if any changes/additions or removals) while having anything matching the regex pattern with "***"
        $tfVars = "-var=environment=$(environment) -var=environment_prefix=${{ parameters.environmentPrefix }} -var=environment_suffix=${{ parameters.environmentSuffix }} -var=actiongroup_name=$(actiongroup_name) -var=actiongroup_resource_group=$(actiongroup_resource_group) -var=container_image_source=${{ parameters.containerImage }} -var=decom_date=${{ parameters.decomDate }}".Split(' ')
        Write-Output "##[debug]`$tfVars = [$tfVars]"
        $terraformOutput = (terraform plan -detailed-exitcode -out=plan $tfVars) -replace "((.*)(docker|password|username|secret|key)([^=]+)= ).*", '$1"***"'
        $terraformOutput
        $terraformApplied = 'No'
        if ($LASTEXITCODE -eq 0){
          Write-Output "No change to infrastructure, skipping 'Apply'."
        }elseif($LASTEXITCODE -eq 1){
          Write-Host "##vso[task.logissue type=error]Error occurred running terraform plan."
          exit 1
        }else{
          Write-Output "Plan has changes, running 'Apply'."
          terraform apply 'plan'
          if($LASTEXITCODE -eq 1){
            Write-Host "##vso[task.logissue type=error]Error occurred running terraform apply."
            exit 1
          }
          $terraformApplied = 'Yes'
        }
    continueOnError: false

# If the pipeline is canceled, there is a possibility terraform did not release the state lock 
# Break the lease on the terraform state blob if its still locked in that odd circumstance
- task: AzureCLI@2
  displayName: 'Post Terraform Cleanup'
  condition: canceled()
  inputs:
    azureSubscription: "${{ parameters.azureDevOpsServiceConnection }}"
    scriptType: pscore
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      $blob = az storage blob show -c $(stateContainer) --account-name $(stateStorageAccount) --name ${{ parameters.applicationName }} | Out-String |ConvertFrom-JSON
      
      if ($blob.properties.lease.status -eq 'locked') {
        Write-Output "##[warning]Found terraform state blob was still locked, forcefully breaking lease.."
        az storage blob lease break -b ${{ parameters.applicationName }} -c $(stateContainer) --account-name $(stateStorageAccount)
        if ($LASTEXITCODE -ne 0) {
          Write-Output "##[warning]Failed to break lease on blob."
        }
      }   