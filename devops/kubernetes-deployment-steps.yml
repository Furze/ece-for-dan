parameters:
  environmentPrefix: ''
  environmentSuffix: ''
  environmentName: ''
  environmentnumber: ''
  azureRMServiceConnection: ''
  containerRepository:
  imageTag: ''
  applicationName: ''

steps:
- ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  - task: PowerShell@2
    displayName: 'Tag Image as latest and Push'
    inputs:
      targetType: inline
      script: |
        $oldImageName = "{0}:{1}" -f $env:CONTAINER_REPO, $env:DOCKER_TAG
        $newImageName = "{0}:latest-{1}{2}" -f $env:CONTAINER_REPO, $env:ENV_NAME, $env:ENV_NUMBER
        
        docker pull $oldImageName
        docker tag $oldImageName $newImageName
        docker push $newImageName

        Write-Output "Re-tagging [$oldImageName] as [$newImageName] .."

        Write-Output "##vso[task.setvariable variable=containerImage]$newImageName"
        Write-Output "##[command]Set variable [containerImage] to [$newImageName]"
    env:
      CONTAINER_REPO: ${{ parameters.containerRepository }}
      DOCKER_TAG: ${{ parameters.imageTag }}
      ENV_NAME: ${{ parameters.environmentName }}
      ENV_NUMBER: ${{ parameters.environmentnumber }}

- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  - task: AzureKeyVault@1
    condition: succeeded()
    displayName: 'Retrieve Signing Key'
    inputs:
      azureSubscription: '$(prodUatAzureRMServiceConnection)'
      keyVaultName: 'mapaersprodsecrets'
      secretsFilter: 'acr-repo-ci-signing-key-passphrase, acr-repo-ci-signing-key, acr-repo-ci-signing-key-filename'
    continueOnError: false

  - task: AzureCLI@2
    displayName: 'ACR Image Signer Auth'
    inputs:
      azureSubscription: '$(prodUatAzureRMServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      addSpnToEnvironment: true
      inlineScript: |
        az acr login -n ${{ parameters.containerRegistry }}

  - task: PowerShell@2
    condition: succeeded()
    displayName: 'Tag Image as latest and Push'
    inputs:
      targetType: inline
      script: |
        mkdir -p $(DOCKER_CONFIG)/trust/private
        [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:KEY_BASE64)) | Out-File -FilePath $(DOCKER_CONFIG)/trust/private/$env:KEY_FILENAME.key
        $oldImageName = "{0}:{1}" -f $env:CONTAINER_REPO, $env:DOCKER_TAG
        $newImageName = "{0}:latest-{1}{2}" -f $env:CONTAINER_REPO, $env:ENV_NAME, $env:ENV_NUMBER
        Write-Output "Re-tagging [$oldImageName] as [$newImageName] .."
        docker pull $oldImageName
        # Validate that the image was signed by the 'ers-ci' pipeline key
        $trustResponse = docker trust inspect $oldImageName | ConvertFrom-JSON
        $rootKeyHash = ($trustResponse.Signers | where {$_.Name -eq "ers-ci" }).Keys.ID
        if ($rootKeyHash -ne $env:KNOWN_SIGNERHASH) {
          Write-Output "Unexpected Signer in image pulled from registry."
          exit 1
        }
        docker tag $oldImageName $newImageName
        docker push $newImageName
    env:
      DOCKER_CONTENT_TRUST: 1 # Force DCT for all docker commands
      DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(acr-repo-ci-signing-key-passphrase)
      KEY_BASE64: $(acr-repo-ci-signing-key)
      KEY_FILENAME: $(acr-repo-ci-signing-key-filename)
      KNOWN_SIGNERHASH: $(acr-repo-ci-signing-key-filename)
      CONTAINER_REPO: ${{ parameters.containerRepository }}
      DOCKER_TAG: ${{ parameters.imageTag }}
      ENV_NAME: ${{ parameters.environmentName }}
      ENV_NUMBER: ${{ parameters.environmentnumber }}

# Deploy App using terraform (for now)
- template: terraform-deploy-steps.yml
  parameters:
    environmentPrefix: '${{ parameters.environmentPrefix }}'
    environmentSuffix: '${{ parameters.environmentSuffix }}'
    environmentName: '${{ parameters.environmentName }}'
    environmentNumber: '${{ parameters.environmentNumber }}'
    applicationName: '${{ parameters.applicationName }}-k8s'
    terraformSourceDir: '$(Build.SourcesDirectory)/devops/kubernetes'
    azureDevOpsServiceConnection: '${{ parameters.azureRMServiceConnection }}'
    containerImage: '$(containerImage)'